#include<GL/glut.h>
#include<iostream>
#include<stdlib.h>
#include<string.h>
#include<stdio.h>
#include<time.h>


int i,q,u,p=1;
float score = 0;
float fuel=100;
int screen = 0;
bool collide = false;
char buffer[10];
int lane=2;
int d=1,e=1,f=1;
int l=0;
int w,h;
float cx,cy,cz,fr,sr;
int speed;



int vehicleX = 200, vehicleY = 70;
int ovehicleX[4], ovehicleY[4],mv[4]={1000,840,520,40},fboxx[4]={1500,1500,1500,1500},fboxy[4];
int divx = 250, divy = 4, movd;



void drawStrokeText(char str[250],int x,int y,int z,float p1,float p2)
{

    int i;
    glPushMatrix();
    glTranslatef(x,y,z);
    glScalef(p1,p2,z);
    for(i=0;str[i]!='\0';i++)
    {
        glutStrokeCharacter(GLUT_STROKE_ROMAN,str[i]);
    }
    glPopMatrix();
}
void drawTextNum(char ch[],int numtext,int xpos, int ypos)
{
    int len;
    int k;
    k = 0;
    len = numtext - strlen (ch);
    glLoadIdentity ();
    glRasterPos2f( xpos , ypos);
    for (i = 0; i <=numtext - 1; i++)
    {
        if ( i < len )
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18,'0');
        else
        {
            glutBitmapCharacter(GLUT_BITMAP_HELVETICA_18, ch[k]);
            k++;
        }

    }
}


void ovpos()
{
    glClearColor(0,0.8,0,0);
    for(i = 0; i < 4; i++)
    {
        int r=rand()%2;
        int s=rand()%3;
        int p=rand()%7;
        int q=rand()%8;
        switch (r)
        {
            case 1:ovehicleX[i]=100;
                fboxx[i]=400;
                break;
            case 0:ovehicleX[i]=200;
                break;

        }
        switch (s)
        {
            case 0:ovehicleX[i]=300;
                break;
            case 1:ovehicleX[i]=400;
                fboxx[i]=100;
                break;
            default:fboxx[i]=1500;
        }
        ovehicleY[i] = 1000 - i * 160;

    }
}



void drawRoad()
{
    glBegin(GL_QUADS);
        glColor3f(0.4,0.4,0.4);
        glVertex2f(50,500);
        glVertex2f(50,0);
        glVertex2f(450,0);
        glVertex2f(450, 500);
    glEnd();
}


void drawDivider()
{
    glLoadIdentity();
    glTranslatef(0,movd, 0);
    for(i = 1; i <= 10; i++)
    {
        glColor3f(1, 1, 1);
        glBegin(GL_QUADS);
        glVertex2f(divx  - 3,divy * 15 * i + 15);
        glVertex2f(divx  - 3,divy * 15 * i - 15);
        glVertex2f(divx  + 3,divy * 15 * i - 15);
        glVertex2f(divx  + 3,divy * 15 * i + 15);
        glEnd();
        glColor3f(1, 1, 1);
        glBegin(GL_QUADS);
        glVertex2f(150  - 3, divy * 15 * i + 15);
        glVertex2f(150  - 3, divy * 15 * i - 15);
        glVertex2f(150  + 3, divy * 15 * i - 15);
        glVertex2f(150  + 3, divy * 15 * i + 15);
        glEnd();
        glColor3f(1,1,1);
        glBegin(GL_QUADS);
        glVertex2f(350  - 3, divy * 15 * i + 15);
        glVertex2f(350  - 3, divy * 15 * i - 15);
        glVertex2f(350  + 3, divy * 15 * i - 15);
        glVertex2f(350  + 3, divy * 15 * i + 15);
        glEnd();

    }
    glLoadIdentity();
}

void drawfuelbox()
{
    for(i = 0; i < 4; i++)
    {
        glBegin(GL_QUADS);
        glColor3f(0.5,0.5,0);
        glVertex2f(fboxx[i] - 9, fboxy[i] + 9);
        glVertex2f(fboxx[i] - 9, fboxy[i] - 9);
        glVertex2f(fboxx[i] + 9, fboxy[i] - 9);
        glVertex2f(fboxx[i] + 9, fboxy[i] + 9);
        glEnd();
        fboxy[i] = fboxy[i] - speed;
    }
}
void drawVehicle()
{
    glPointSize(15.0);
    glBegin(GL_POINTS);
    glColor3f(0,0,0);
       glVertex2f(vehicleX - 15, vehicleY + 20);
       glVertex2f(vehicleX - 15, vehicleY - 30);
       glVertex2f(vehicleX + 14.5, vehicleY - 30);
       glVertex2f(vehicleX + 14.5, vehicleY + 20);
    glEnd();
    glPointSize(7.0);
       glBegin(GL_POINTS);
       glColor3f(1,1,0);
       glVertex2f(vehicleX - 10, vehicleY + 45);
       glVertex2f(vehicleX + 10, vehicleY + 45);
    glEnd();
    glBegin(GL_QUADS);
       glColor3f(cx+0.1,cy+0.1,cz+0.1);
       glVertex2f(vehicleX - 15, vehicleY + 30);
       glVertex2f(vehicleX - 15, vehicleY - 40);
       glVertex2f(vehicleX + 15, vehicleY - 40);
       glVertex2f(vehicleX + 15, vehicleY + 30);
    glEnd();
    glBegin(GL_POLYGON);
    glColor3f(cx-0.2,cy-0.2,cz-0.2);
    glVertex2f(vehicleX - 15, vehicleY + 30);
       glVertex2f(vehicleX - 10, vehicleY + 45);
       glVertex2f(vehicleX + 10, vehicleY + 45);
       glVertex2f(vehicleX + 15, vehicleY + 30);
    glBegin(GL_QUADS);
    glColor3f(cx-0.2,cy-0.2,cz-0.2);
       glVertex2f(vehicleX - 13, vehicleY + 15);
       glVertex2f(vehicleX - 13, vehicleY - 30);
       glVertex2f(vehicleX + 13, vehicleY - 30);
       glVertex2f(vehicleX + 13, vehicleY + 15);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX-13,vehicleY+15);
    glVertex2f(vehicleX-15,vehicleY+30);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX-13,vehicleY-30);
    glVertex2f(vehicleX-15,vehicleY-40);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX+13,vehicleY-30);
    glVertex2f(vehicleX+15,vehicleY-40);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX+13,vehicleY+15);
    glVertex2f(vehicleX+15,vehicleY+30);
    glEnd();
    glPointSize(5);
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX-15,vehicleY-5);
    glVertex2f(vehicleX-13,vehicleY-5);
    glEnd();
    glBegin(GL_LINES);
    glColor3f(0,0,0);
    glVertex2f(vehicleX+15,vehicleY-5);
    glVertex2f(vehicleX+13,vehicleY-5);
    glEnd();


}
void drawText(char ch[],int xpos, int ypos)
{
    int numofchar = strlen(ch);
    glLoadIdentity();
    glRasterPos2f( xpos , ypos);
    for (i = 0; i <= numofchar - 1; i++)
    {
        glutBitmapCharacter(GLUT_BITMAP_TIMES_ROMAN_24, ch[i]);
    }
}
void drawOVehicle()
{
    for(i = 0; i < 4; i++)
    {
        glPointSize(15.0);
        glBegin(GL_POINTS);
        glColor3f(0,0,0);
        glVertex2f(ovehicleX[i] - 15, ovehicleY[i] + 20);
        glVertex2f(ovehicleX[i] - 15, ovehicleY[i] - 30);
        glVertex2f(ovehicleX[i] + 14.5, ovehicleY[i] - 30);
        glVertex2f(ovehicleX[i] + 14.5, ovehicleY[i] + 20);
        glEnd();
        glPointSize(7.0);
        glBegin(GL_POINTS);
        glColor3f(1,1,0);
        glVertex2f(ovehicleX[i] - 10, ovehicleY[i] + 40);
        glVertex2f(ovehicleX[i] + 10, ovehicleY[i] + 40);
        glEnd();
        glBegin(GL_QUADS);
        glColor3f(0.5, 0.1, 0.0);
        glVertex2f(ovehicleX[i] - 15, ovehicleY[i] + 40);
        glVertex2f(ovehicleX[i] - 15, ovehicleY[i] - 40);
        glVertex2f(ovehicleX[i] + 15, ovehicleY[i] - 40);
        glVertex2f(ovehicleX[i] + 15, ovehicleY[i] + 40);
        glEnd();
        ovehicleY[i] = ovehicleY[i] - speed;
        if((ovehicleY[i] > vehicleY - 25 - 25 && ovehicleY[i] < vehicleY + 25 + 25 && ovehicleX[i] == vehicleX) || fuel<0)
        {
            collide=true;
            screen=5;
        }
        if((fboxy[i] > vehicleY - 25 - 25 && fboxy[i] < vehicleY + 25 + 25 && fboxx[i] == vehicleX) )
        {
            fuel=100;
            d=1;e=1;f=1;
            glColor3f(0,1,0);
            drawStrokeText("FUEL FULL",200,250,0,0.10,0.20);
        }
        if(ovehicleY[i] < -25 && fboxy[i]< -25)
        {
            int r=rand()%2;
            int s=rand()%3;
            int p=rand()%8;
            int q=rand()%9;
            switch (r)
            {
                case 1:ovehicleX[i]=100;
                        fboxx[i]=400;
                        break;

                case 0:ovehicleX[i]=200;
                        break;
            }
            switch (s)
            {
                case 0:ovehicleX[i]=300;
                        break;
                case 1:ovehicleX[i]=400;
                        fboxx[i]=100;
                        break;
            }
            ovehicleY[i] = 600;
            if(((int)fuel%5)==0)fboxy[i]=600;
            else fboxy[i]=0;
        }
    }
}
void Specialkey(int key, int x, int y)
{
    switch(key)
    {
        case GLUT_KEY_LEFT: {
                                switch (lane)
                                {
                                    case 2:
                                        {
                                            vehicleX = 100;
                                            lane=1;
                                            break;
                                        }
                                    case 3:
                                        {
                                            vehicleX= 200;
                                            lane=2;
                                            break;
                                        }
                                    case 4:
                                        {
                                            vehicleX= 300;
                                            lane=3;
                                            break;
                                        }
                                }
                            }
        break;
        case GLUT_KEY_RIGHT:{
                                switch (lane)
                                {
                                    case 1:
                                        {
                                            vehicleX = 200;
                                            lane=2;
                                            break;
                                        }
                                    case 2:
                                        {
                                            vehicleX= 300;
                                            lane=3;
                                            break;
                                        }
                                    case 3:
                                        {
                                            vehicleX= 400;
                                            lane=4;
                                            break;
                                        }
                                }
                            }
        break;
    }
    glutPostRedisplay();
}

void Normalkey(unsigned char key, int x, int y)
{
    switch(key)
    {
        case '1':if(screen == 0)
                screen=1;
                break;
        case '2':if(screen == 1)
                screen=2;
                break;
        case '3':if(screen == 2)
                screen=3;
                break;
        case '4':if(screen == 3)
                    {
                        cx=0.75;cy=0;cz=0;
                        screen=4;
                    }
                break;
        case 'e':cx=0;cy=0.5;cz=0;screen=4;speed=3;fr=0.1;sr=0.1;break;
        case 'm':cx=0;cy=0;cz=0.75;screen=4;speed=8;fr=0.2;sr=0.3;break;
        case 'd':cx=0.75;cy=0;cz=0;screen=4;speed=15;fr=0.3;sr=0.5;break;
        case 27:exit(0);
    }
}
void init()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluOrtho2D(0, 500, 0, 500);
    glMatrixMode(GL_MODELVIEW);
}
void display()
{
    if(screen == 0)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glClearColor(0.45,0,0,0);
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("WELCOME TO THE GAME",165,350,0,0.10,0.20);
        drawStrokeText("TRAFFIC", 180, 270,0,0.25,0.30);
        drawStrokeText("DRIVER", 190, 230,0,0.25,0.30);
        drawStrokeText("Press 1 to START", 185, 180,0,0.1,0.1);
        drawStrokeText("Developed By:",70, 90,0,0.08,0.08);
        drawStrokeText("Yash Utkarsh(1MV14CS123)",70, 70,0,0.08,0.08);
        drawStrokeText("Yash Verma(1MV14CS124)",70, 50,0,0.08,0.08);
        drawStrokeText("For Computer Graphics",300, 90,0,0.08,0.08);
        drawStrokeText("And",350, 70,0,0.08,0.08);
        drawStrokeText("Visualisation Library Project",290, 50,0,0.08,0.08);
        for(i = 0; i < 4; i++)
        {
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(50 - 15, mv[i] + 20);
            glVertex2f(50 - 15, mv[i] - 30);
            glVertex2f(50 + 14.5, mv[i] - 30);
            glVertex2f(50 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(50 - 10, mv[i] + 40);
            glVertex2f(50 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.0, 0.0, 0.8);
            glVertex2f(50 - 15, mv[i] + 40);
            glVertex2f(50 - 15, mv[i] - 40);
            glVertex2f(50+  15, mv[i] - 40);
            glVertex2f(50 + 15, mv[i] + 40);
            glEnd();
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(450 - 15, mv[i] + 20);
            glVertex2f(450 - 15, mv[i] - 30);
            glVertex2f(450 + 14.5, mv[i] - 30);
            glVertex2f(450 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(450 - 10, mv[i] + 40);
            glVertex2f(450 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.0, 0.0, 0.8);
            glVertex2f(450 - 15, mv[i] + 40);
            glVertex2f(450 - 15, mv[i] - 40);
            glVertex2f(450+  15, mv[i] - 40);
            glVertex2f(450 + 15, mv[i] + 40);
            glEnd();
            Sleep(1);
            mv[i]=mv[i]+5;
            if(mv[i]>1000)
            {
                mv[i]=-160;
            }
        }
        glutSwapBuffers();
    }
    else if(screen==1)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("INSTRUCTIONS:", 160, 390,0,0.2,0.2);
        drawStrokeText("-> Dodge incoming traffic by ", 140, 340,0,0.1,0.1);
        drawStrokeText("   changing lanes",140,320,0,0.1,0.1);
        drawStrokeText("-> Collect Fuel before it gets over ", 140, 280,0,0.1,0.1);
        drawStrokeText("   to continue moving forward ",140,260,0,0.1,0.1);
        drawStrokeText("Fuel box:", 140, 220,0,0.1,0.1);
        glBegin(GL_QUADS);
        glColor3f(0.5,0.5,0);
        glVertex2f(230 - 9, 225 + 9);
        glVertex2f(230 - 9, 225 - 9);
        glVertex2f(230 + 9, 225 - 9);
        glVertex2f(230 + 9, 225 + 9);
        glEnd();
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("Traffic cars :", 140, 170,0,0.1,0.1);
        glPointSize(15.0);
        glBegin(GL_POINTS);
        glColor3f(0,0,0);
        glVertex2f(250 - 15, 140 + 20);
        glVertex2f(250 - 15, 140 - 30);
        glVertex2f(250 + 14.5, 140 - 30);
        glVertex2f(250 + 14.5, 140 + 20);
        glEnd();
        glPointSize(7.0);
        glBegin(GL_POINTS);//tire
        glColor3f(1,1,0);
        glVertex2f(250 - 10, 140 + 40);
        glVertex2f(250 + 10, 140 + 40);
        glEnd();
        glBegin(GL_QUADS);
        glColor3f(0.5, 0.1, 0.0);//middle body
        glVertex2f(250 - 15, 140 + 40);
        glVertex2f(250 - 15, 140 - 40);
        glVertex2f(250 + 15, 140 - 40);
        glVertex2f(250 + 15, 140 + 40);
        glEnd();
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("Press 2 to continue", 170, 80,0,0.1,0.1);
        drawStrokeText("(dodge these)", 280, 140,0,0.1,0.1);
        glColor3f(0.85,0.85,0.1);
        drawText("Score:", 360,455);
        itoa(score, buffer, 10);
        drawTextNum(buffer, 6, 420,455);
        drawText("fuel:",5,455);
        itoa((int)fuel, buffer, 10);
        drawTextNum(buffer, 6, 25,455);
        for(i = 0; i < 4; i++)
        {
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(100 - 15, mv[i] + 20);
            glVertex2f(100 - 15, mv[i] - 30);
            glVertex2f(100 + 14.5, mv[i] - 30);
            glVertex2f(100 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(100 - 10, mv[i] + 40);
            glVertex2f(100 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.0, 0.8, 0.0);
            glVertex2f(100 - 15, mv[i] + 40);
            glVertex2f(100 - 15, mv[i] - 40);
            glVertex2f(100+  15, mv[i] - 40);
            glVertex2f(100 + 15, mv[i] + 40);
            glEnd();
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(400 - 15, mv[i] + 20);
            glVertex2f(400 - 15, mv[i] - 30);
            glVertex2f(400 + 14.5, mv[i] - 30);
            glVertex2f(400 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(400 - 10, mv[i] + 40);
            glVertex2f(400 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.0, 0.8, 0.0);
            glVertex2f(400 - 15, mv[i] + 40);
            glVertex2f(400 - 15, mv[i] - 40);
            glVertex2f(400+  15, mv[i] - 40);
            glVertex2f(400 + 15, mv[i] + 40);
            glEnd();
            Sleep(1);
            mv[i]=mv[i]+1;
            if(mv[i]>1000)
            {
                mv[i]=-160;
            }
        }
        glutSwapBuffers();
    }
    else if(screen == 2)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("CONTROLS:", 147,330,0,0.25,0.25);
        drawStrokeText("left arrow -- moves left",135,260,0,0.1,0.1);
        drawStrokeText("right arrow -- moves right",135,230,0,0.1,0.1);
        drawStrokeText("Press 3 to continue",185,150,0,0.07,0.07);
        for(i = 0; i < 4; i++)
        {
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(100 - 15, mv[i] + 20);
            glVertex2f(100 - 15, mv[i] - 30);
            glVertex2f(100 + 14.5, mv[i] - 30);
            glVertex2f(100 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(100 - 10, mv[i] + 40);
            glVertex2f(100 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.8, 0.0, 0.0);
            glVertex2f(100 - 15, mv[i] + 40);
            glVertex2f(100 - 15, mv[i] - 40);
            glVertex2f(100+  15, mv[i] - 40);
            glVertex2f(100 + 15, mv[i] + 40);
            glEnd();
            glPointSize(15.0);
            glBegin(GL_POINTS);
            glColor3f(0,0,0);
            glVertex2f(350 - 15, mv[i] + 20);
            glVertex2f(350 - 15, mv[i] - 30);
            glVertex2f(350 + 14.5, mv[i] - 30);
            glVertex2f(350 + 14.5, mv[i] + 20);
            glEnd();
            glPointSize(7.0);
            glBegin(GL_POINTS);
            glColor3f(1,1,0);
            glVertex2f(350 - 10, mv[i] + 40);
            glVertex2f(350 + 10, mv[i] + 40);
            glEnd();
            glBegin(GL_QUADS);
            glColor3f(0.8, 0.0, 0.0);
            glVertex2f(350 - 15, mv[i] + 40);
            glVertex2f(350 - 15, mv[i] - 40);
            glVertex2f(350+  15, mv[i] - 40);
            glVertex2f(350 + 15, mv[i] + 40);
            glEnd();
            Sleep(1);
            mv[i]=mv[i]+1;
            if(mv[i]>1000)
            {
                mv[i]=-160;
            }
        }
        glutSwapBuffers();
    }
    else if(screen==3)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glColor3f(0.85,0.85,0.1);
        drawStrokeText("Choose:", 200, 400,0,0.25,0.25);
        glColor3f(0,0.5,0);
        drawStrokeText("press e for easy",70, 300,0,0.08,0.1);
        glPointSize(15.0);
        glBegin(GL_POINTS);
        glColor3f(0,0,0);
        glVertex2f(120 - 15, 230 + 20);
        glVertex2f(120 - 15, 230 - 30);
        glVertex2f(120 + 14.5, 230 - 30);
        glVertex2f(120 + 14.5,230 + 20);
        glEnd();
        glPointSize(7.0);
        glBegin(GL_POINTS);
        glColor3f(1,1,0);
        glVertex2f(120 - 10, 230 + 40);
        glVertex2f(120 + 10, 230 + 40);
        glEnd();
        glBegin(GL_QUADS);
        glColor3f(0,0.5,0);
        glVertex2f(120 - 15, 230 + 40);
        glVertex2f(120 - 15, 230 - 40);
        glVertex2f(120 + 15, 230 - 40);
        glVertex2f(120 + 15, 230 + 40);
        glEnd();
        glColor3f(0,0,0.75);
        drawStrokeText("press m for medium",190,300,0,0.08,0.1);
        glPointSize(15.0);
        glBegin(GL_POINTS);
        glColor3f(0,0,0);
        glVertex2f(240 - 15, 230 + 20);
        glVertex2f(240 - 15, 230 - 30);
        glVertex2f(240 + 14.5, 230 - 30);
        glVertex2f(240 + 14.5,230 + 20);
        glEnd();
        glPointSize(7.0);
        glBegin(GL_POINTS);
        glColor3f(1,1,0);
        glVertex2f(240 - 10, 230 + 40);
        glVertex2f(240 + 10, 230 + 40);
        glEnd();
        glBegin(GL_QUADS);
        glColor3f(0,0,0.75);
        glVertex2f(240 - 15, 230 + 40);
        glVertex2f(240 - 15, 230 - 40);
        glVertex2f(240 + 15, 230 - 40);
        glVertex2f(240 + 15, 230 + 40);
        glEnd();
        glColor3f(0.8,0,0);
        drawStrokeText("press d for difficult",320,300,0,0.08,0.1);
        glPointSize(15.0);
        glBegin(GL_POINTS);
        glColor3f(0,0,0);
        glVertex2f(370 - 15, 230 + 20);
        glVertex2f(370 - 15, 230 - 30);
        glVertex2f(370 + 14.5, 230 - 30);
        glVertex2f(370 + 14.5,230 + 20);
        glEnd();
        glPointSize(7.0);
        glBegin(GL_POINTS);
        glColor3f(1,1,0);
        glVertex2f(370 - 10, 230 + 40);
        glVertex2f(370 + 10, 230 + 40);
        glEnd();
        glBegin(GL_QUADS);
        glColor3f(0.75,0,0);
        glVertex2f(370 - 15, 230 + 40);
        glVertex2f(370 - 15, 230 - 40);
        glVertex2f(370 + 15, 230 - 40);
        glVertex2f(370 + 15, 230 + 40);
        glEnd();
        glutSwapBuffers();
    }
    else if(screen == 5)
    {
        glClear(GL_COLOR_BUFFER_BIT);
        glClearColor(0,0,0,0);
        glColor3f(1,0,0);
        drawStrokeText("GAME OVER",140,400,0,0.3,0.3);
        glColor3f(1,0,0);
        drawStrokeText("Score :", 190,300,0,0.2,0.2);
        itoa(score, buffer, 10);
        drawStrokeText(buffer,300,300,0,0.15,0.15);
        glColor3f(1,0,0);
        drawStrokeText("Press escape to exit",193,40,0,0.1,0.08);
        glutSwapBuffers();
    }
    else
    {
        glClear(GL_COLOR_BUFFER_BIT);
        drawRoad();
        drawDivider();
        drawVehicle();
        drawOVehicle();
        drawfuelbox();
        movd = movd - 13;
        if(movd < - 60)
        {
            movd = 0;
        }
    if(collide!=true)score = score + sr ;
    glColor3f(1,1,1);
    drawText("Score:", 360,455);
    itoa(score, buffer, 10);
    drawTextNum(buffer, 6, 420,455);
    if(collide!=true)fuel = fuel-fr;
    if(fuel <50)d=1,e=0.5,f=0;
    if(fuel<30){d=1,e=0,f=0;
    glColor3f(1,0,0);
    drawText("FUEL LOW!!!!", 200,250);}
    glColor3f(d,e,f);
    drawText("fuel:",5,455);
    itoa((int)fuel, buffer, 10);
    drawTextNum(buffer, 6, 25,455);
    glutSwapBuffers();
    for(q = 0; q<= 10000000; q++){;}
    }
}
void idle()
{
    glutPostRedisplay();
}
void reshape(int width,int height)
{
    w=width;
    h=height;
}

int main(int argc, char **argv)
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_RGB|GLUT_DOUBLE);
    glutInitWindowPosition(100,100);
    glutInitWindowSize(800,500);
    glutCreateWindow("2D Traffic Driver");
    glutFullScreen();
    ovpos();
    init();
    glutDisplayFunc(display);
    glutKeyboardFunc(Normalkey);
    glutSpecialFunc(Specialkey);
    glEnable(GL_BLEND);
    glBlendFunc(GL_ONE,GL_ONE_MINUS_SRC_ALPHA);
    glEnable(GL_LINE_SMOOTH);
    glutIdleFunc(idle);
    glutMainLoop();
    return 0;
}
